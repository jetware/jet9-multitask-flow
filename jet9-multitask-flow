#!/bin/sh
# Copyright © 2014-2015 Cyril Vechera http://jet9.net
# All rights reserved.
# 
# BSD-2
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


## Core functions
#
#   dependency_init() - initial lock FIFO mutexes
#   dependency_wait() - wait on the mutexes
#   dependency_mark() - mark (broadcast release)
#   dependency_lock() - wait and lock FIFO mutexes
#   dependency_run()  - run task:
#                         wait for all the WAIT mutexes,
#                         lock all LOCK mutexes
#                         run the task
#                         release the LOCK mutexes
#                         release the MARK mutexes

dependency_init() {
	local name pass=
	for name in "$@"; do
		if ! mkfifo "$LOCK_DIR/$name" 2>/dev/null; then
			for name in $pass; do
				rm -f "$LOCK_DIR/$name"
			done
			return 1
		fi
		pass="$pass $name"
	done
}

dependency_wait() {
	local name none
	for name in $*; do
		read none < "$LOCK_DIR/$name"
	done 2>/dev/null
}

dependency_mark() {
	local name
	for name in $*; do
		mv "$LOCK_DIR/$name" "$LOCK_DIR/$name.done"
		: <> "$LOCK_DIR/$name.done" 
		rm -f "$LOCK_DIR/$name.done"
	done
}

dependency_lock() {
	local pass= name
	[ $# -gt 0 ] || return
	while [ -z "$pass" ]; do
		for name in $*; do
			# try to lock
			if mkfifo "$LOCK_DIR/$name" 2>/dev/null; then
				pass="$pass $name"
			else
				# release previous locks, wait current lock and restart
				dependency_mark $pass
				dependency_wait $name
				debug "lock restart on $name"
				pass=
				break
			fi
		done
	done
}

# Arguments: task_and_args wait mark lock
dependency_run() {
	local task=${1%% *} args="${1#* }"
	local wait="$2" mark="${3:-$task}" lock="$4"
	local id="$wait -> $mark"

	debug "task: $task, wait: $wait, ($id)"
	dependency_wait $wait

	if [ -n "$task" ]; then
		if [ -z "$dry_run" ]; then
			debug "task: $task, lock: $lock, ($id)"
			dependency_lock $lock
			debug "task: $task, execute: $args, ($id)"
			task_execute $task $args
			debug "task: $task, mark(lock): $lock, ($id)"
			dependency_mark $lock
		else
			task_simulate $task $args
		fi
	fi

	dependency_mark $mark
	debug "task: $task, mark: $mark, ($id)"
}

## Implementation functions
#
# This layer is implementation specific and the functions can be redefined
# for other purposes.


# Execute script keeping it's pid to kill the script if needed
# This function can be redefined to execute a task in another mode,
# i.e. as a shell function, or shell script sourced and executed in subshell,
# or calling some program and passing task and args to it etc.

task_simulate() {
	local task=$1
	local script

	shift
	eval script=\$path_$task
	echo "$script $@"
}

task_execute() {
	local task=$1
	local script

	shift

	eval script=\$path_$task
	info "$script $@"

	terminated() {
		local _err=$?
		trap '' INT TERM
		notice "task $1 terminated"
		if [ -n "$scriptpid" ]; then
			debug "kill script $script, pid $scriptpid"
			kill $scriptpid 2>/dev/null
		fi
		exit $_err
	}

	# dual trap used to echo output from normal exit context, where stderr is not closed
	trap terminated INT TERM

	# run script with args argument, save it's pid to kill it if needed, and wait for complete
	"$script" "$@" &
	scriptpid=$!
	wait $scriptpid
	local status=$?
	scriptpid=
	trap - INT TERM
	return $?
}

# Get dependencties for all relations of the task and args

task_dependencies_relations() {
	local task=$1 args="$2" dependency tasks
	for relation in wait lead lock mark auto; do
		task_dependencies $task $relation "$args"
		debug "dependencies for task $task, $relation: $task_dependencies_result"
		eval task_dependencies_relations_result_$relation=\"$task_dependencies_result\"
	done
}

# Get wait and mark dependencies for task
#
# arguments: relation (wait|lead|lock|mark|auto), task, args, script_path
# result must be assigned to "wait_$task" variable
#
# The function can be redefined to extract script dependencies by another
# ways, i.e. with awk search for keywords in a script headers and so on.
# 
# Arguments: task relation [args ...]
task_dependencies() {
	local task=$1 relation=$2
	shift 2
	local script dependency dependencies
	task_dependencies_result=
	eval script=\$path_$task
	if [ -x $script ]; then
		dependencies=$($script $relation "$@" 2>/dev/null)
		[ $? -eq 0 ] || return
		for dependency in $dependencies; do
			task_internal $dependency
			task_dependencies_result="$task_dependencies_result $task_internal_result"
		done
	fi
}

# Rewrite task name to the name suitable for internal purpose, mainly to
# use it in a shell variables name.
# The function replaces all hypens and dots to underscores.
# Return result via shared variable 'task_internal_result'.

task_internal() {
	local IFS='-.' part
	set $1
	task_internal_result=$1
	shift
	for part in $*; do
		task_internal_result="${task_internal_result}_${part}"
	done
}


# Get WAIT, LEAD, LOCK, MARK and AUTO names for args for tasks
# Arguments: args scripts_list
# Install dependencies to the shared variables with relation as prefix and task as suffix
# Save all tasks as flow_tasks
flow_load() {
	local args="$1"
	shift

	local script name task task_internal_result
	local task_dependencies_relations_result_wait
	local task_dependencies_relations_result_lead
	local task_dependencies_relations_result_mark
	local task_dependencies_relations_result_auto

	# Build mapping of a task's internal name to the task's script path
	flow_tasks=
	for script in $*; do
		name=${script##*/}
		task_internal $name
		eval path_$task_internal_result=$script
		flow_tasks="$flow_tasks $task_internal_result"
	done

	# Get WAIT, LEAD, LOCK, MARK and AUTO names from flow tasks
	for task in $flow_tasks; do
		task_dependencies_relations $task "$args"

		eval wait_$task="\$task_dependencies_relations_result_wait"
		eval lead_$task="\$task_dependencies_relations_result_lead"
		eval lock_$task="\$task_dependencies_relations_result_lock"
		eval mark_$task="\$task_dependencies_relations_result_mark"
		eval auto_$task="\$task_dependencies_relations_result_auto"
	done
}


## Auxiliary runtime functions

error()  { if [ "$VERBOSE" -ge 0 ]; then log "$*"; fi }
warn()   { if [ "$VERBOSE" -ge 1 ]; then log "$*"; fi }
notice() { if [ "$VERBOSE" -ge 2 ]; then log "$*"; fi }
info()   { if [ "$VERBOSE" -ge 3 ]; then log "$*"; fi }
debug()  { if [ "$VERBOSE" -ge 4 ]; then log "$*"; fi }
log()    { echo "$*" >&2; }


## Flow locking  functions
#
# Use flock(1) if available and enabled by FLOCK env,
# otherwise plain file locking.

: ${FLOCK=yes}
if [ -n "$FLOCK" ] && type flock >/dev/null 2>&1; then
	# Install flock-based locking

	lock_create() {
		mkdir -p "$LOCK_DIR.$$"
		echo $$ > "$LOCK_DIR.$$/flow.pid"
		exec 9< "$LOCK_DIR.$$"
		flock 9 

		mv --no-target-directory "$LOCK_DIR.$$" "$LOCK_DIR" 2>/dev/null &&
			return 0

		exec 9<&-
		rm -rf "$LOCK_DIR.$$"
		return 1
	}

	lock_wait() {
		flock 9 9< "$LOCK_DIR"
	}

	lock_cleanup() {
		exec 9< "$LOCK_DIR" || return 0

		# Если нельзя заблокировать каталог лока, то это актуальный лок,
		# поэтому возвращаем ошибку
		if ! flock -n 9; then
			exec 9<&-
			return 1
		fi

		# Если удалось заблокировать каталог лока, значит он брошен
		# и мы присвоили его себе, как обычный лок. Поэтому освобождаем
		# его тоже как обычный лок.
		lock_remove
		return 0
	}

	lock_remove() {
		mv "$LOCK_DIR" "$LOCK_DIR.$$.delete" && rm -rf "$LOCK_DIR.$$.delete"
		exec 9<&-
	}
else
	# Install plain file locking

	lock_create() {
		mkdir -p "$LOCK_DIR.$$"
		echo $$ > "$LOCK_DIR.$$/flow.pid"

		mv --no-target-directory "$LOCK_DIR.$$" "$LOCK_DIR" 2>/dev/null &&
			return 0

		rm -rf "$LOCK_DIR.$$"
		return 1
	}

	lock_check() {
		local pid
		[ -e "$LOCK_DIR/flow.pid" ] && read pid < "$LOCK_DIR/flow.pid" && kill -0 $pid
	}

	lock_wait() {
		local pid=
		while true; do
			lock_check || return
			sleep 1
		done
	}

	lock_cleanup() {
		lock_check && return 1
		lock_remove
		return 0
	}

	lock_remove() {
		mv "$LOCK_DIR" "$LOCK_DIR.$$.delete" && rm -rf "$LOCK_DIR.$$.delete"
	}
fi

lock_ensure() {
	while true; do
		# Пробуем получить лок на месте пустого каталога
		if lock_create; then
			return 0
		else
			# Если лок не удалось получить, значит есть какой-то каталог.
			# Его нужно проверить на актуальность и удалить, если он старый.
			# Если устарел, то lock_cleanup очищает каталог и возвращает true,
			# после чего мы снова пытаемся получить лок с исходного состояния.
			lock_cleanup && continue

			# Если есть флаг принудительной остановки уже работающего потока,
			# то останавливаем его и включаем режим ожидания.
			if [ -n "$force_kill" ]; then
				read pid < "$LOCK_DIR/flow.pid" && kill $pid
				try_or_fail=
			fi

			# Если указана остановка без ожидания, значит возвращаем ошибку
			[ -n "$try_or_fail" ] && return 1

			# Ждем завершения другого потока и пробуем получить лок снова
			lock_wait
		fi
	done
}

## CLI
#
# Parse command line, find scripts, resolve tasks dependencies and run the batch

jet9_multitask_flow() {

	err_exit() {
		log "$1"
		exit ${2:-1}
	}

	usage() {
		err_exit "Usage: $(basename $0) [-a] [-f] [-i include_source] [-n] [-q] [-v] [-t] [-d] args [tasks ...]

Arguments:
	-a       - add all AUTO-dependent tasks to run list
	-f       - forced run, kill another flow process if exists
	-i       - include another shell script source
	-n       - dry run
	-q       - quiet (repeat to decrease output level)
	-v       - verbose (repeat to increase output level)
	-t       - stop if another flow process if exists (otherwise wait till another process exits)
	-d       - list dependencies for args, can be used for 'tsort'
			   to check for problems
	args     - start, stop or another action
	tasks    - task scripts from FLOW_DIR;
			   all scripts from FLOW_DIR used if tasks are omitted

Environment:
	FLOW_DIR=${FLOW_DIR}
	LOCK_DIR=${LOCK_DIR}"
	}

	while getopts afnqvtdi: opt
	do
		case "$opt" in
			a) auto_add=1 ;;
			f) force_kill=1 ;;
			i) include_source="${include_source} $OPTARG" ;;
			n) dry_run=1 ;;
			q) VERBOSE=$((VERBOSE-1)) ;;
			v) VERBOSE=$((VERBOSE+1)) ;;
			t) try_or_fail=1 ;;
			d) dependencies=1 ;;
			*) usage ;;
		esac
	done

	shift $(($OPTIND - 1))

	# Include another source. Can be used to redefine dependency_* functions or program flags.

	for source in $include_source; do
		debug "include $source"
		. $source
	done

	# Get args and tasks

	[ $# -ge 1 ] || usage

	args="$1"
	shift

	# If tasks omitted or auto add is on, find all available scripts and add them to flow scripts

	scripts=
	if [ $# -eq 0 -o -n "$auto_add" ]; then
		# If FLOW_DIR is set, check existence of all directories
		if [ -n "$FLOW_DIR" ]; then
			for dir in $FLOW_DIR; do
				[ -d $dir ] || err_exit "not a directory $dir"
			done

			for dir in $FLOW_DIR; do
				for script in $dir/*; do
					[ -x "$script" ] || continue # Process only executable scripts
					scripts="$scripts $script"
				done
			done
		fi
	else
		for script in "$@"; do
			case $script in
			/*)
				[ -x "$script" ] || err_exit "script $script not found"
				scripts="$scripts $script"
				;;
			*)
				for dir in $FLOW_DIR; do
					path=$dir/$script
					[ -x "$path" ] && break
					path=
				done
				[ -n "$path" ] || err_exit "script $script not found"
				scripts="$scripts $path"
				;;
			esac
		done
	fi


	# Load dependencies and tasks flow
	flow_load "$args" $scripts

	# Prepare virtual tasks (defined only by marks and without corresponding script)

	for task in $flow_tasks; do
		eval task_marks=\$mark_$task
		for mark in $task_marks; do
			[ "$task" = "$mark" ] && continue
			eval mark_tasks=\$mark_tasks_$mark
			[ -z "$mark_tasks" ] && marks="$marks $mark"
			eval mark_tasks_$mark=\"$mark_tasks $task\"
		done
	done

	# Build running tasks list

	if [ $# -eq 0 ]; then
		# no task in argument, use all flow tasks from all dirs in FLOW_DIR
		tasks=$flow_tasks
	else
		# use tasks from arguments
		tasks=
		for script in $*; do
			name=${script##*/}
			task_internal $name
			tasks="$tasks $task_internal_result"
		done
		if [ -n "$auto_add" ]; then
			# add dependent tasks
			debug "auto add tasks"
			curr_tasks=$tasks
			tasks=
			marks=
			while [ -n "$curr_tasks" ]; do
				next_tasks=
				# check AUTO dependencies and add them to running task list
				for task in $curr_tasks; do
					eval checked=\$checked_$task
					[ -z "$checked" ] || continue
					eval mark_tasks=\$mark_tasks_$task
					if [ -z "$mark_tasks" ]; then
						# no tasks wich define this mark
						eval script=\$path_$task
						if [ -n "$script" ]; then
							# real task
							tasks="$tasks $task"
							eval next_tasks=\"\$next_tasks \$auto_$task\"
						else
							# unsatisfied dependency, do nothing
							debug "unsatisfied dependency $task"
						fi
					else
						# virtual task (tasks for MARK)
						marks="$marks $task"
						next_tasks="$next_tasks $mark_tasks"
					fi
					eval checked_$task=1
				done
				curr_tasks=$next_tasks
			done
		fi
	fi

	debug "tasks: $tasks"


	# Add leading tasks to wait lists

	for task in $tasks; do
		eval lead=\"\$lead_$task\"
		for name in $lead; do
			eval mark_tasks=\$mark_tasks_$name
			if [ -n "$mark_tasks" ]; then
				# virtual task (tasks for MARK)
				for mark_task in  $mark_tasks; do
					eval wait_$mark_task=\"\$wait_$mark_task $task\"
				done
			else
				# real task
				eval wait_$name=\"\$wait_$name $task\"
			fi
		done
	done

	# Dump dependencies for -d option

	if [ -n "$dependencies" ]; then
		# tasks with scripts
		for task in $tasks; do
			eval wait=\"\$wait_$task\"
			for name in $wait; do
				echo "$task $name"
			done
		done

		# virtuals tasks, from marks
		for mark in $marks; do
			eval wait=\"\$mark_tasks_$mark\"
			for name in $wait; do
				echo "$mark $name"
			done
		done
		exit 0
	fi


	# Create run directory, lock and prepare flows

	lock_ensure || err_exit "another flow in $LOCK_DIR running"

	dependency_init $tasks $marks || err_exit "can't acquire initial locks"

	taskpids=

	# close FD 9 when running async tasks to detach them from the lock
	# made my flock(1)

	# run tasks with scripts
	for task in $tasks; do
		(
			eval wait=\"\$wait_$task\"
			eval lock=\"\$lock_$task\"
			dependency_run "$task $args" "$wait" "$task" "$lock" 
		) 9<&- &
		child=$!
		debug "async dependency_run '$task $args' '$wait' '$task' '$lock', pid: $child"
		taskpids="$taskpids $child"
	done

	# run virtuals tasks, from marks
	for mark in $marks; do
		(
			eval wait=\"\$mark_tasks_$mark\"
			dependency_run '' "$wait" "$mark"
		) 9<&- &
		child=$!
		debug "async dependency_run '' '$wait' '$mark', pid: $child"
		taskpids="$taskpids $child"
	done

	cleanup() {
		trap '' EXIT

		lock_remove
	}

	terminate() {
		trap '' INT TERM

		# kill all tasks
		kill -TERM $taskpids 2>/dev/null
		rm -f $LOCK_DIR/*
		exit 2
	}

	trap cleanup EXIT
	trap terminate INT TERM

	# wait all them complete

	debug "wait"
	wait

	debug "done"
}

# Check JET9_MULTITASK_FLOW_CLI_DISABLE and run command if not
# To use jet9_multitask_flow only as library, set JET9_MULTITASK_FLOW_CLI_DISABLE
# before loading via . source

: ${FLOW_DIR:='/own/etc/init'}
: ${LOCK_DIR:='/tmp/init'}
: ${VERBOSE:=2} # default level: NOTICE

if [ -n "$JET9_MULTITASK_FLOW_CLI_DISABLE" ]; then
	unset JET9_MULTITASK_FLOW_CLI_DISABLE
else
	jet9_multitask_flow "$@"
fi
